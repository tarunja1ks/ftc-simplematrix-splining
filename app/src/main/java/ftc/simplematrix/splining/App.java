/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ftc.simplematrix.splining;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.Timer;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JSlider;

public class App {
    private static Timer timer;
    private static double t = 0;
    private static boolean isPlaying = true;

    private static double updateTime = 0.1; // how frequently we update the robot, in seconds


    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        List<QSplinePath>spline_xs= new ArrayList<QSplinePath>();
        List<QSplinePath>spline_ys= new ArrayList<QSplinePath>();
        
        // spline constructor format is the initial time,position,velocity,acceleration then final time, position, velocity, acceleration

        // X splines
        QSplinePath splinex=new QSplinePath(0,-24,0,0,2,-7,4,2);
        splinex.makeSpline();

        QSplinePath splinex3=new QSplinePath(2,-7,4,0,3,-12,-3,4); 
        splinex3.makeSpline();

        QSplinePath splinex2=new QSplinePath(3, -12, -7, 0, 4, -36, 0, 0);
        splinex2.makeSpline();


        // y splines
        QSplinePath spliney=new QSplinePath(0,-55,0,0,2,0,8.42,0);
        spliney.makeSpline();

        QSplinePath spliney3=new QSplinePath(2,0,8.42,0,3,24,8.42,0);
        spliney3.makeSpline();


        QSplinePath spliney2=new QSplinePath(3,24,8.42,0,4,48,0,0);
        spliney2.makeSpline();


        // adding the splines to the arraylist
        spline_xs.add(splinex);
        spline_xs.add(splinex3);
        spline_xs.add(splinex2);

        spline_ys.add(spliney);
        spline_ys.add(spliney3);
        spline_ys.add(spliney2);

        int max_t = spline_xs.size()+1;

        GraphPanel panel = new GraphPanel(spline_xs,spline_ys);
        JFrame frame = new JFrame("Polynomial Graph");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(2000, 2000);
        frame.add(panel);
        frame.setVisible(true);

        // Create slider for time control, assume x and y spline arrays have same size
        JSlider timeSlider = new JSlider(0, (max_t)*10, 0); // Assuming the total time range is 0 to 40
        timeSlider.setMajorTickSpacing(10);
        timeSlider.setMinorTickSpacing(1);
        timeSlider.setPaintTicks(true);
        timeSlider.setPaintLabels(true);
        timeSlider.addChangeListener(e -> {
            t = timeSlider.getValue() / 10.0;
            panel.updateRobotPosition(t);
            panel.repaint();
        });

        // Create pause and play buttons
        JButton pauseButton = new JButton("Pause");
        JButton playButton = new JButton("Play");

        pauseButton.addActionListener(e -> {
            isPlaying = false;
            timer.stop();
        });

        playButton.addActionListener(e -> {
            isPlaying = true;
            timer.start();
        });

        // Add buttons and slider to a panel
        JPanel controlPanel = new JPanel();
        controlPanel.add(pauseButton);
        controlPanel.add(playButton);
        controlPanel.add(timeSlider);

        // Add control panel to frame
        frame.add(controlPanel, BorderLayout.SOUTH);

        frame.setVisible(true);

        // Create and start timer
        Timer timer = new Timer((int)updateTime*1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (isPlaying) {
                    t += updateTime;
                    if (t > max_t) {
                        t = 0;
                    }
                    panel.updateRobotPosition(t);
                    panel.repaint();
                    timeSlider.setValue((int) (t * 10)); // Update slider position
                }
            }
        });
        timer.start();


        
    }
}








